diff a/app/lib/main.dart b/app/lib/main.dart	(rejected hunks)
@@ -1,13 +1,15 @@
+import 'dart:async';
+
+import 'package:app_links/app_links.dart';
+// import 'url_protocol/api.dart';
+
 import 'dart:io';
 import 'package:app/View/Screens/Authentication/SignIn.dart';
 import 'package:app/View/Screens/Authentication/SignUp.dart';
 import 'package:app/View/Screens/Authentication/ResetPassword.dart'; // Import the ResetPassword page
-import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:firebase_core/firebase_core.dart';
-import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
-import 'Model/search-model.dart';
 import 'View/Screens/Authentication/forget_password.dart';
 import 'View/Screens/controller/sign_up_screen_controller.dart';
 import 'ViewModel/meal_view_model.dart';
@@ -15,11 +17,10 @@ import 'View/Screens/Home.dart';
 import 'View/Screens/OnBoarding1.dart';
 import 'View/Screens/OnBoarding2.dart';
 import 'View/Screens/SplashScreen.dart';
-import 'View/Screens/offer.dart';
 import 'themes/theme-provider.dart';
 import 'themes/dark.dart';
 import 'themes/light.dart';
-import 'package:app/View/widgets/app_bar.dart';
+import 'package:app/View/Widgets/app_bar.dart';
 
 void main() async {
   WidgetsFlutterBinding.ensureInitialized();
@@ -52,10 +53,66 @@ class MyApp extends StatefulWidget {
 
 class _MyAppState extends State<MyApp> {
   ThemeMode _themeMode = ThemeMode.light;
+  final _navigatorKey = GlobalKey<NavigatorState>();
+  late AppLinks _appLinks;
+  StreamSubscription<Uri>? _linkSubscription;
+
+  @override
+  void initState() {
+    super.initState();
+
+    initDeepLinks();
+  }
+
+  void dispose() {
+    _linkSubscription?.cancel();
+
+    super.dispose();
+  }
+
+  Future<void> initDeepLinks() async {
+    _appLinks = AppLinks();
+
+    // Handle links
+    _linkSubscription = _appLinks.uriLinkStream.listen((uri) {
+      print('onAppLink: $uri');
+      openAppLink(uri, context);
+    });
+  }
+
+  void openAppLink(Uri uri, BuildContext context) {
+    print("🔴 I'M TRYING TO OPEN ${uri.query}");
+
+    if (uri.host == "resetpassword") {
+      // بدنا نستخرج oobCode, apiKey, mode من query string
+      // عشان نحسن نبعتهم مرة تانية للـ Backend ونعمل استعادة لكلمة المرور
+      print("queryParams: ${uri.queryParameters}");
+      final oobCode = uri.queryParameters['oobCode'];
+      final apiKey = uri.queryParameters['apiKey'];
+      final mode = uri.queryParameters['mode'];
+
+      // نتأكد أنهم موجودات فعلًا
+      if (oobCode == null) {
+        print("Could not find oobCode");
+        return;
+      } else if (apiKey == null) {
+        print("Could not find apiKey");
+        return;
+      } else if (mode == null) {
+        print("Could not find mode");
+        return;
+      }
+
+      print("SUCCESSFULLY FOUND THE HOST");
+      _navigatorKey.currentState?.pushReplacementNamed(
+          '/reset-password/${oobCode}/${apiKey}/${mode}');
+    }
+  }
 
   void _toggleTheme() {
     setState(() {
-      _themeMode = _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
+      _themeMode =
+          _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
     });
   }
 
@@ -78,8 +135,10 @@ class _MyAppState extends State<MyApp> {
       child: Consumer<ThemeProvider>(
         builder: (context, themeProvider, child) {
           return MaterialApp(
+            navigatorKey: _navigatorKey,
             title: 'Flutter Demo',
-            themeMode: themeProvider.isDarkMode ? ThemeMode.dark : ThemeMode.light,
+            themeMode:
+                themeProvider.isDarkMode ? ThemeMode.dark : ThemeMode.light,
             theme: themeProvider.isDarkMode ? darkMode : lightMode,
             debugShowCheckedModeBanner: false,
             home: Scaffold(
@@ -98,14 +157,68 @@ class _MyAppState extends State<MyApp> {
                 ),
               ),
             ),
-            routes: {
-              '/onboarding1': (context) => Onboarding1(),
-              '/onboarding2': (context) => Onboarding2Screen(),
-              '/offer': (context) => HomePage(),
-              '/sign-up': (context) => SignUpScreen(),
-              '/signIn': (context) => SignInScreen(),
-              '/forget-password': (context) => ForgetPassword(),
-              '/reset-password': (context) => ResetPassword(), // Add the reset password route
+            onGenerateRoute: (settings) {
+              Widget routeWidget = Onboarding1();
+
+              // routes: {
+              //   '/onboarding1': (context) => Onboarding1(),
+              //   //wipoda2568@cgbird.com
+              //   '/onboarding2': (context) => Onboarding2Screen(),
+              //   '/offer': (context) => HomePage(),
+              //   '/sign-up': (context) => SignUpScreen(),
+              //   '/signIn': (context) => SignInScreen(),
+              //   '/forget-password': (context) => ForgetPassword(),
+              //   '/reset-password': (context) =>
+              //       ResetPassword(), // Add the reset password route
+              // },
+              // Mimic web routing
+              final routeName = settings.name;
+              if (routeName != null) {
+                if (routeName.startsWith('/onboarding1')) {
+                  // Navigated to /book/:id
+                  routeWidget = Onboarding1();
+                } else if (routeName.startsWith('/onboarding2')) {
+                  // Navigated to /book/:id
+                  routeWidget = Onboarding2Screen();
+                } else if (routeName == '/offer') {
+                  // Navigated to /book/:id
+                  routeWidget = HomePage();
+                } else if (routeName == '/sign-up') {
+                  // Navigated to /book/:id
+                  routeWidget = SignUpScreen();
+                } else if (routeName == '/signIn') {
+                  // Navigated to /book/:id
+                  routeWidget = SignInScreen();
+                } else if (routeName == '/forget-password') {
+                  // Navigated to /book/:id
+                  routeWidget = ForgetPassword();
+                } else if (routeName == '/reset-password') {
+                  // Navigated to /book/:id
+                } else if (routeName.startsWith('/reset-password')) {
+                  // Navigated to /book/:id
+                  try {
+                    final parameters = settings.name
+                            ?.split('/')
+                            .where((element) => element.isNotEmpty)
+                            .toList() ??
+                        [];
+                    parameters.removeAt(0);
+                    final oobCode = parameters[0];
+
+                    print("SETTINGS ${parameters}");
+                    routeWidget = ResetPassword(oobCode);
+                  } catch (e) {
+                    print("Error parsing route name");
+                  }
+                  // routeWidget = EpicScreen(settings);
+                }
+              }
+
+              return MaterialPageRoute(
+                builder: (context) => routeWidget,
+                settings: settings,
+                fullscreenDialog: true,
+              );
             },
           );
         },
